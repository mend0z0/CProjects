
FW_MEDWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000398  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3b  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084e  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d8  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000479  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000069a  00000000  00000000  000025b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  7a:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2CErrorChecker>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static unsigned int I2CErrorChecker( unsigned int condition){
	if((condition == MT_SLA_NOT_ACK) || (condition == MT_DATA_NOT_ACK)){
  82:	80 32       	cpi	r24, 0x20	; 32
  84:	91 05       	cpc	r25, r1
  86:	61 f0       	breq	.+24     	; 0xa0 <I2CErrorChecker+0x1e>
  88:	80 33       	cpi	r24, 0x30	; 48
  8a:	91 05       	cpc	r25, r1
  8c:	61 f0       	breq	.+24     	; 0xa6 <I2CErrorChecker+0x24>
		return 1;
	}
	else if((condition == MR_SLA_NOT_ACK) || (condition == MR_DATA_NOT_ACK)){
  8e:	88 34       	cpi	r24, 0x48	; 72
  90:	91 05       	cpc	r25, r1
  92:	61 f0       	breq	.+24     	; 0xac <I2CErrorChecker+0x2a>
  94:	88 35       	cpi	r24, 0x58	; 88
  96:	91 05       	cpc	r25, r1
  98:	61 f4       	brne	.+24     	; 0xb2 <I2CErrorChecker+0x30>
		return 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static unsigned int I2CErrorChecker( unsigned int condition){
	if((condition == MT_SLA_NOT_ACK) || (condition == MT_DATA_NOT_ACK)){
		return 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret
	}
	else if((condition == MR_SLA_NOT_ACK) || (condition == MR_DATA_NOT_ACK)){
		return 1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret
	}
	return 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
}
  b6:	08 95       	ret

000000b8 <_init_I2C>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void _init_I2C( void ){
	DDRC |= (1 << 0) | (1 << 1);
  b8:	84 b3       	in	r24, 0x14	; 20
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	84 bb       	out	0x14, r24	; 20
	
	TWBR = 2;				// For 400KHz frequency clock on SCL it should be 8000000/(16+(2 * 2 (TWBR) * 4^0(TWPS)))
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 b9       	out	0x00, r24	; 0
  c2:	08 95       	ret

000000c4 <SendDataOnI2C>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
unsigned int SendDataOnI2C( unsigned addr, unsigned int *data, unsigned int buffSize){
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <SendDataOnI2C+0x12>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	18 2f       	mov	r17, r24
  dc:	6b 01       	movw	r12, r22
  de:	7a 01       	movw	r14, r20
	volatile unsigned int i2cErrorValue = 0X00;
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	19 82       	std	Y+1, r1	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);			//Send START condition
  e4:	84 ea       	ldi	r24, 0xA4	; 164
  e6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT))){
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <SendDataOnI2C+0x24>
																// add a timeout if that didn't happen to just return an error and stop the transmission
	}
	
	i2cErrorValue = I2CErrorChecker(TWSR & 0xF8);
  ee:	81 b1       	in	r24, 0x01	; 1
  f0:	88 7f       	andi	r24, 0xF8	; 248
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 41 00 	call	0x82	; 0x82 <I2CErrorChecker>
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
	if(i2cErrorValue == 1){
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	29 f4       	brne	.+10     	; 0x10e <SendDataOnI2C+0x4a>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);		//Transmit STOP condition
 104:	84 e9       	ldi	r24, 0x94	; 148
 106:	86 bf       	out	0x36, r24	; 54
		return ERROR;
 108:	8e ee       	ldi	r24, 0xEE	; 238
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	3e c0       	rjmp	.+124    	; 0x18a <SendDataOnI2C+0xc6>
	}
	
	TWDR = (addr | WRITE);
 10e:	13 b9       	out	0x03, r17	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT))){
 114:	06 b6       	in	r0, 0x36	; 54
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <SendDataOnI2C+0x50>
																// add a timeout if that didn't happen to just return an error and stop the transmission
	}
	i2cErrorValue = I2CErrorChecker(TWSR & 0xF8);
 11a:	81 b1       	in	r24, 0x01	; 1
 11c:	88 7f       	andi	r24, 0xF8	; 248
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 41 00 	call	0x82	; 0x82 <I2CErrorChecker>
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
	if(i2cErrorValue == 1){
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	21 f5       	brne	.+72     	; 0x178 <SendDataOnI2C+0xb4>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);		//Transmit STOP condition
 130:	84 e9       	ldi	r24, 0x94	; 148
 132:	86 bf       	out	0x36, r24	; 54
		return ERROR;
 134:	8e ee       	ldi	r24, 0xEE	; 238
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	28 c0       	rjmp	.+80     	; 0x18a <SendDataOnI2C+0xc6>
	}
	
	for(unsigned int counter = 0; counter < buffSize; ++counter){
		TWDR = data[counter];
 13a:	f8 01       	movw	r30, r16
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	ec 0d       	add	r30, r12
 142:	fd 1d       	adc	r31, r13
 144:	80 81       	ld	r24, Z
 146:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT) | (1 << TWEN);
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	86 bf       	out	0x36, r24	; 54
		while(!(TWCR & (1 << TWINT))){
 14c:	06 b6       	in	r0, 0x36	; 54
 14e:	07 fe       	sbrs	r0, 7
 150:	fd cf       	rjmp	.-6      	; 0x14c <SendDataOnI2C+0x88>
																// add a timeout if that didn't happen to just return an error and stop the transmission
		}
		i2cErrorValue = I2CErrorChecker(TWSR & 0xF8);
 152:	81 b1       	in	r24, 0x01	; 1
 154:	88 7f       	andi	r24, 0xF8	; 248
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 41 00 	call	0x82	; 0x82 <I2CErrorChecker>
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
		if(i2cErrorValue == 1){
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	9a 81       	ldd	r25, Y+2	; 0x02
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	29 f4       	brne	.+10     	; 0x172 <SendDataOnI2C+0xae>
			TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);	//Transmit STOP condition
 168:	84 e9       	ldi	r24, 0x94	; 148
 16a:	86 bf       	out	0x36, r24	; 54
			return ERROR;
 16c:	8e ee       	ldi	r24, 0xEE	; 238
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0c c0       	rjmp	.+24     	; 0x18a <SendDataOnI2C+0xc6>
	if(i2cErrorValue == 1){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);		//Transmit STOP condition
		return ERROR;
	}
	
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	02 c0       	rjmp	.+4      	; 0x17c <SendDataOnI2C+0xb8>
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	0e 15       	cp	r16, r14
 17e:	1f 05       	cpc	r17, r15
 180:	e0 f2       	brcs	.-72     	; 0x13a <SendDataOnI2C+0x76>
			TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);	//Transmit STOP condition
			return ERROR;
		}
	}
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);		//Transmit STOP condition
 182:	84 e9       	ldi	r24, 0x94	; 148
 184:	86 bf       	out	0x36, r24	; 54
	return OK;
 186:	8c ec       	ldi	r24, 0xCC	; 204
 188:	90 e0       	ldi	r25, 0x00	; 0
}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	08 95       	ret

000001a0 <SendCommandToSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void SendCommandToSSD1306( unsigned int *command, unsigned int buffSize){
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	6c 97       	sbiw	r28, 0x1c	; 28
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	dc 01       	movw	r26, r24
	unsigned int controlByte = 0b10000000;						//0b	C0	D/C	0	0	0	0	0	0 if C0 set to one it means the next data is command and if D/C set to zero it means the next data byte is command
	unsigned int data[14];
	
	buffSize *= 2;
 1ba:	8b 01       	movw	r16, r22
 1bc:	00 0f       	add	r16, r16
 1be:	11 1f       	adc	r17, r17
	
	if(buffSize > 13){
 1c0:	0e 30       	cpi	r16, 0x0E	; 14
 1c2:	11 05       	cpc	r17, r1
 1c4:	50 f5       	brcc	.+84     	; 0x21a <SendCommandToSSD1306+0x7a>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	19 c0       	rjmp	.+50     	; 0x1fe <SendCommandToSSD1306+0x5e>
		return ;
	}
	
	for(unsigned int counter = 0; counter < buffSize; ++counter){
		data[counter] = controlByte;
 1cc:	f9 01       	movw	r30, r18
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	4c 0f       	add	r20, r28
 1d8:	5d 1f       	adc	r21, r29
 1da:	e4 0f       	add	r30, r20
 1dc:	f5 1f       	adc	r31, r21
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24
		counter += 1;
 1e6:	f9 01       	movw	r30, r18
 1e8:	31 96       	adiw	r30, 0x01	; 1
		data[counter] = *command;
 1ea:	8d 91       	ld	r24, X+
 1ec:	9d 91       	ld	r25, X+
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e4 0f       	add	r30, r20
 1f4:	f5 1f       	adc	r31, r21
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
	
	if(buffSize > 13){
		return ;
	}
	
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 1fa:	2e 5f       	subi	r18, 0xFE	; 254
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	20 17       	cp	r18, r16
 200:	31 07       	cpc	r19, r17
 202:	20 f3       	brcs	.-56     	; 0x1cc <SendCommandToSSD1306+0x2c>
		counter += 1;
		data[counter] = *command;
		command++;
	}
	
	while( SendDataOnI2C( SSD1306_I2C_ADDR, data, buffSize) != OK);
 204:	a8 01       	movw	r20, r16
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	88 e7       	ldi	r24, 0x78	; 120
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 62 00 	call	0xc4	; 0xc4 <SendDataOnI2C>
 214:	8c 3c       	cpi	r24, 0xCC	; 204
 216:	91 05       	cpc	r25, r1
 218:	a9 f7       	brne	.-22     	; 0x204 <SendCommandToSSD1306+0x64>
}
 21a:	6c 96       	adiw	r28, 0x1c	; 28
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <SendDataToSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void SendDataToSSD1306( unsigned int data ){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <SendDataToSSD1306+0x6>
 236:	00 d0       	rcall	.+0      	; 0x238 <SendDataToSSD1306+0x8>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	unsigned int controlByte = 0b01000000;						//0b	C0	D/C	0	0	0	0	0	0 if C0 set to zero it means the next data is data and if D/C set to 1 it means the next data byte is data
	unsigned int str_data[2] = {controlByte, data};
 23c:	20 e4       	ldi	r18, 0x40	; 64
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	3a 83       	std	Y+2, r19	; 0x02
 242:	29 83       	std	Y+1, r18	; 0x01
 244:	9c 83       	std	Y+4, r25	; 0x04
 246:	8b 83       	std	Y+3, r24	; 0x03
	while(SendDataOnI2C( SSD1306_I2C_ADDR, str_data, 2) != OK);
 248:	42 e0       	ldi	r20, 0x02	; 2
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	be 01       	movw	r22, r28
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	88 e7       	ldi	r24, 0x78	; 120
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 62 00 	call	0xc4	; 0xc4 <SendDataOnI2C>
 25a:	8c 3c       	cpi	r24, 0xCC	; 204
 25c:	91 05       	cpc	r25, r1
 25e:	a1 f7       	brne	.-24     	; 0x248 <SendDataToSSD1306+0x18>
}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <_init_SSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void _init_SSD1306( void ){
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <_init_SSD1306+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <_init_SSD1306+0x8>
 276:	00 d0       	rcall	.+0      	; 0x278 <_init_SSD1306+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	unsigned int cmdChargePump[] = {0X8D, 0X14};
 27c:	8d e8       	ldi	r24, 0x8D	; 141
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	9a 83       	std	Y+2, r25	; 0x02
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	84 e1       	ldi	r24, 0x14	; 20
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9c 83       	std	Y+4, r25	; 0x04
 28a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int setDisOn = SET_DIS_ON;
 28c:	8f ea       	ldi	r24, 0xAF	; 175
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	9e 83       	std	Y+6, r25	; 0x06
 292:	8d 83       	std	Y+5, r24	; 0x05
	//enable Charge pump
	SendCommandToSSD1306( cmdChargePump, 2);
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SendCommandToSSD1306>
	SendCommandToSSD1306( &setDisOn, 1 ); // 12
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	ce 01       	movw	r24, r28
 2a6:	05 96       	adiw	r24, 0x05	; 5
 2a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SendCommandToSSD1306>
}
 2ac:	26 96       	adiw	r28, 0x06	; 6
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <DisplayImgOnSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void DisplayImgOnSSD1306( unsigned int *p_data, unsigned int buffSize){
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	7c 01       	movw	r14, r24
 2cc:	8b 01       	movw	r16, r22
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <DisplayImgOnSSD1306+0x2a>
		SendDataToSSD1306( p_data[counter] );
 2d4:	fe 01       	movw	r30, r28
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	ee 0d       	add	r30, r14
 2dc:	ff 1d       	adc	r31, r15
 2de:	80 81       	ld	r24, Z
 2e0:	91 81       	ldd	r25, Z+1	; 0x01
 2e2:	0e 94 18 01 	call	0x230	; 0x230 <SendDataToSSD1306>
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void DisplayImgOnSSD1306( unsigned int *p_data, unsigned int buffSize){
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	c0 17       	cp	r28, r16
 2ea:	d1 07       	cpc	r29, r17
 2ec:	98 f3       	brcs	.-26     	; 0x2d4 <DisplayImgOnSSD1306+0x16>
		SendDataToSSD1306( p_data[counter] );
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	08 95       	ret

000002fc <main>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
int main(void)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	c4 56       	subi	r28, 0x64	; 100
 306:	d1 09       	sbc	r29, r1
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
	unsigned int data_s[25] = {0Xff,
 312:	82 e3       	ldi	r24, 0x32	; 50
 314:	e0 e6       	ldi	r30, 0x60	; 96
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	de 01       	movw	r26, r28
 31a:	11 96       	adiw	r26, 0x01	; 1
 31c:	01 90       	ld	r0, Z+
 31e:	0d 92       	st	X+, r0
 320:	8a 95       	dec	r24
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x20>
		0Xff,
		0Xff,
		0Xff,
		0Xff
	};
	unsigned int data_c[25] = {0Xff,
 324:	fe 01       	movw	r30, r28
 326:	f3 96       	adiw	r30, 0x33	; 51
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	df 01       	movw	r26, r30
 32c:	1d 92       	st	X+, r1
 32e:	8a 95       	dec	r24
 330:	e9 f7       	brne	.-6      	; 0x32c <main+0x30>
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	9c ab       	std	Y+52, r25	; 0x34
 338:	8b ab       	std	Y+51, r24	; 0x33
		0x00,
		0x00,
		0x00,
		0x00
	};
	DDRA |= 0X01;
 33a:	8a b3       	in	r24, 0x1a	; 26
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << 1);
 340:	8b b3       	in	r24, 0x1b	; 27
 342:	82 60       	ori	r24, 0x02	; 2
 344:	8b bb       	out	0x1b, r24	; 27
	_init_I2C();
 346:	0e 94 5c 00 	call	0xb8	; 0xb8 <_init_I2C>
	_init_SSD1306();
 34a:	0e 94 37 01 	call	0x26e	; 0x26e <_init_SSD1306>
	/* Replace with your application code */
	while (1)
	{	
		DisplayImgOnSSD1306( data_s, 25);
 34e:	69 e1       	ldi	r22, 0x19	; 25
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 5f 01 	call	0x2be	; 0x2be <DisplayImgOnSSD1306>
		PORTA ^= 0X01;
 35a:	9b b3       	in	r25, 0x1b	; 27
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	89 27       	eor	r24, r25
 360:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	bf ef       	ldi	r27, 0xFF	; 255
 364:	24 e3       	ldi	r18, 0x34	; 52
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	b1 50       	subi	r27, 0x01	; 1
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x6c>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x76>
 372:	00 00       	nop
		_delay_ms(500);
		DisplayImgOnSSD1306( data_c, 25);
 374:	69 e1       	ldi	r22, 0x19	; 25
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	ce 01       	movw	r24, r28
 37a:	c3 96       	adiw	r24, 0x33	; 51
 37c:	0e 94 5f 01 	call	0x2be	; 0x2be <DisplayImgOnSSD1306>
 380:	9f ef       	ldi	r25, 0xFF	; 255
 382:	a4 e3       	ldi	r26, 0x34	; 52
 384:	bc e0       	ldi	r27, 0x0C	; 12
 386:	91 50       	subi	r25, 0x01	; 1
 388:	a0 40       	sbci	r26, 0x00	; 0
 38a:	b0 40       	sbci	r27, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x8a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x94>
 390:	00 00       	nop
 392:	dd cf       	rjmp	.-70     	; 0x34e <main+0x52>

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
