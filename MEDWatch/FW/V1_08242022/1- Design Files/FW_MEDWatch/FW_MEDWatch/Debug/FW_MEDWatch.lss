
FW_MEDWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000330  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2b  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087b  00000000  00000000  00001007  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005dd  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e3  00000000  00000000  00002443  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  7a:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2CErrorChecker>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void I2CErrorChecker( unsigned int condition){
	DDRA |= (1 << 2);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	84 60       	ori	r24, 0x04	; 4
  86:	8a bb       	out	0x1a, r24	; 26
	PORTA ^= (1 << 2);
  88:	9b b3       	in	r25, 0x1b	; 27
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	89 27       	eor	r24, r25
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	08 95       	ret

00000092 <__vector_19>:
static void I2CErrorChecker( unsigned int condition);

/****************************************************************************************************
**************************       ISR FUNCTIONS DECLARATION       ************************************
*****************************************************************************************************/
ISR(TWI_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	TWCR |= (1 << TWINT);
  9e:	86 b7       	in	r24, 0x36	; 54
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	86 bf       	out	0x36, r24	; 54
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <_init_I2C>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void _init_I2C( void ){
	DDRC |= (1 << 0) | (1 << 1);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	84 bb       	out	0x14, r24	; 20
	
	TWBR = 2;			// For 400KHz frequency clock on SCL it should be 8000000/(16+(2 * 2 (TWBR) * 4^0(TWPS)))
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 b9       	out	0x00, r24	; 0
  ba:	08 95       	ret

000000bc <SendDataOnI2C>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
unsigned int SendDataOnI2C( unsigned addr, unsigned int *data, unsigned int buffSize){
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	c8 2f       	mov	r28, r24
  ca:	7b 01       	movw	r14, r22
  cc:	8a 01       	movw	r16, r20
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	//Send START condition
  ce:	84 ea       	ldi	r24, 0xA4	; 164
  d0:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1<<TWINT)));				//Wait for TWINT Flag set. This indicates that the START condition has been transmitted
  d2:	06 b6       	in	r0, 0x36	; 54
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <SendDataOnI2C+0x16>
	
	if ((TWSR & 0xF8) != START){				//Check value of TWI Status Register. Mask prescaler bits. If status different from	START go to ERROR
  d8:	81 b1       	in	r24, 0x01	; 1
  da:	88 7f       	andi	r24, 0xF8	; 248
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	21 f0       	breq	.+8      	; 0xe8 <SendDataOnI2C+0x2c>
		I2CErrorChecker( START );
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 41 00 	call	0x82	; 0x82 <I2CErrorChecker>
	}
	//-------------------------------------------------------------
	TWDR = (addr | WRITE);						//Load SLA_W into TWDR Register. Clear TWINT bit in TWCR to start transmission of address
  e8:	c3 b9       	out	0x03, r28	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1<<TWINT)));				//Wait for TWINT Flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <SendDataOnI2C+0x32>
	
	if ((TWSR & 0xF8) != MT_SLA_ACK){			//Check value of TWI Status Register. Mask prescaler bits. If status different from	MT_SLA_ACK go to ERROR
  f4:	81 b1       	in	r24, 0x01	; 1
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	88 31       	cpi	r24, 0x18	; 24
  fa:	21 f0       	breq	.+8      	; 0x104 <SendDataOnI2C+0x48>
		I2CErrorChecker( MT_SLA_ACK );	
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 41 00 	call	0x82	; 0x82 <I2CErrorChecker>
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
unsigned int SendDataOnI2C( unsigned addr, unsigned int *data, unsigned int buffSize){
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	15 c0       	rjmp	.+42     	; 0x134 <SendDataOnI2C+0x78>
	if ((TWSR & 0xF8) != MT_SLA_ACK){			//Check value of TWI Status Register. Mask prescaler bits. If status different from	MT_SLA_ACK go to ERROR
		I2CErrorChecker( MT_SLA_ACK );	
	}
	//--------------------------------------------------------------
	for(unsigned int counter = 0; counter < buffSize; ++counter){
		TWDR = data[counter];									//Load DATA into TWDR Register. Clear TWINT bit in TWCR to start transmission of data
 10a:	fe 01       	movw	r30, r28
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	ee 0d       	add	r30, r14
 112:	ff 1d       	adc	r31, r15
 114:	80 81       	ld	r24, Z
 116:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	86 bf       	out	0x36, r24	; 54
		
		while (!(TWCR & (1<<TWINT)));								//Wait for TWINT Flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received.
 11c:	06 b6       	in	r0, 0x36	; 54
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <SendDataOnI2C+0x60>
		
		if ((TWSR & 0xF8) != MT_DATA_ACK){							//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_ACK go to ERROR
 122:	81 b1       	in	r24, 0x01	; 1
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	21 f0       	breq	.+8      	; 0x132 <SendDataOnI2C+0x76>
			I2CErrorChecker(MT_DATA_ACK);
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 41 00 	call	0x82	; 0x82 <I2CErrorChecker>
	
	if ((TWSR & 0xF8) != MT_SLA_ACK){			//Check value of TWI Status Register. Mask prescaler bits. If status different from	MT_SLA_ACK go to ERROR
		I2CErrorChecker( MT_SLA_ACK );	
	}
	//--------------------------------------------------------------
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c0 17       	cp	r28, r16
 136:	d1 07       	cpc	r29, r17
 138:	40 f3       	brcs	.-48     	; 0x10a <SendDataOnI2C+0x4e>
			I2CErrorChecker(MT_DATA_ACK);
			//break;
		}
	}
	//-------------------------------------------------------------
	TWCR |= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//Transmit STOP condition
 13a:	86 b7       	in	r24, 0x36	; 54
 13c:	84 69       	ori	r24, 0x94	; 148
 13e:	86 bf       	out	0x36, r24	; 54
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	08 95       	ret

0000014e <SendCommandToSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void SendCommandToSSD1306( unsigned int *command, unsigned int buffSize){
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	6c 97       	sbiw	r28, 0x1c	; 28
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	dc 01       	movw	r26, r24
	unsigned int controlByte = 0b10000000;						//0b	C0	D/C	0	0	0	0	0	0 if C0 set to one it means the next data is command and if D/C set to zero it means the next data byte is command
	unsigned int data[14];
	
	buffSize *= 2;
 164:	ab 01       	movw	r20, r22
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
	
	if(buffSize > 13){
 16a:	4e 30       	cpi	r20, 0x0E	; 14
 16c:	51 05       	cpc	r21, r1
 16e:	30 f5       	brcc	.+76     	; 0x1bc <SendCommandToSSD1306+0x6e>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	19 c0       	rjmp	.+50     	; 0x1a8 <SendCommandToSSD1306+0x5a>
		return ;
	}
	
	for(unsigned int counter = 0; counter < buffSize; ++counter){
		data[counter] = controlByte;
 176:	f9 01       	movw	r30, r18
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	6c 0f       	add	r22, r28
 182:	7d 1f       	adc	r23, r29
 184:	e6 0f       	add	r30, r22
 186:	f7 1f       	adc	r31, r23
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
		counter += 1;
 190:	f9 01       	movw	r30, r18
 192:	31 96       	adiw	r30, 0x01	; 1
		data[counter] = *command;
 194:	8d 91       	ld	r24, X+
 196:	9d 91       	ld	r25, X+
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	e6 0f       	add	r30, r22
 19e:	f7 1f       	adc	r31, r23
 1a0:	91 83       	std	Z+1, r25	; 0x01
 1a2:	80 83       	st	Z, r24
	
	if(buffSize > 13){
		return ;
	}
	
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 1a4:	2e 5f       	subi	r18, 0xFE	; 254
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	24 17       	cp	r18, r20
 1aa:	35 07       	cpc	r19, r21
 1ac:	20 f3       	brcs	.-56     	; 0x176 <SendCommandToSSD1306+0x28>
		counter += 1;
		data[counter] = *command;
		command++;
	}
	
	SendDataOnI2C( SSD1306_I2C_ADDR, data, buffSize);
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	88 e7       	ldi	r24, 0x78	; 120
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 5e 00 	call	0xbc	; 0xbc <SendDataOnI2C>
}
 1bc:	6c 96       	adiw	r28, 0x1c	; 28
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <SendDataToSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void SendDataToSSD1306( unsigned int data ){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <SendDataToSSD1306+0x6>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <SendDataToSSD1306+0x8>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	unsigned int controlByte = 0b01000000;						//0b	C0	D/C	0	0	0	0	0	0 if C0 set to zero it means the next data is data and if D/C set to 1 it means the next data byte is data
	unsigned int str_data[2] = {controlByte, data};
 1da:	20 e4       	ldi	r18, 0x40	; 64
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	3a 83       	std	Y+2, r19	; 0x02
 1e0:	29 83       	std	Y+1, r18	; 0x01
 1e2:	9c 83       	std	Y+4, r25	; 0x04
 1e4:	8b 83       	std	Y+3, r24	; 0x03
	SendDataOnI2C( SSD1306_I2C_ADDR, str_data, 2);
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	be 01       	movw	r22, r28
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	88 e7       	ldi	r24, 0x78	; 120
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 5e 00 	call	0xbc	; 0xbc <SendDataOnI2C>
}
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <_init_SSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void _init_SSD1306( void ){
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	00 d0       	rcall	.+0      	; 0x20c <_init_SSD1306+0x6>
 20c:	00 d0       	rcall	.+0      	; 0x20e <_init_SSD1306+0x8>
 20e:	00 d0       	rcall	.+0      	; 0x210 <_init_SSD1306+0xa>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	unsigned int cmdChargePump[] = {0X8D, 0X14};
 214:	8d e8       	ldi	r24, 0x8D	; 141
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	9a 83       	std	Y+2, r25	; 0x02
 21a:	89 83       	std	Y+1, r24	; 0x01
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9c 83       	std	Y+4, r25	; 0x04
 222:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int setDisOn = SET_DIS_ON;
 224:	8f ea       	ldi	r24, 0xAF	; 175
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	9e 83       	std	Y+6, r25	; 0x06
 22a:	8d 83       	std	Y+5, r24	; 0x05
	//enable Charge pump
	SendCommandToSSD1306( cmdChargePump, 2);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 a7 00 	call	0x14e	; 0x14e <SendCommandToSSD1306>
	SendCommandToSSD1306( &setDisOn, 1 ); // 12
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	05 96       	adiw	r24, 0x05	; 5
 240:	0e 94 a7 00 	call	0x14e	; 0x14e <SendCommandToSSD1306>
}
 244:	26 96       	adiw	r28, 0x06	; 6
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <DisplayImgOnSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void DisplayImgOnSSD1306( unsigned int *p_data, unsigned int buffSize){
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	7c 01       	movw	r14, r24
 264:	8b 01       	movw	r16, r22
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	0a c0       	rjmp	.+20     	; 0x280 <DisplayImgOnSSD1306+0x2a>
		SendDataToSSD1306( p_data[counter] );
 26c:	fe 01       	movw	r30, r28
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0d       	add	r30, r14
 274:	ff 1d       	adc	r31, r15
 276:	80 81       	ld	r24, Z
 278:	91 81       	ldd	r25, Z+1	; 0x01
 27a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SendDataToSSD1306>
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void DisplayImgOnSSD1306( unsigned int *p_data, unsigned int buffSize){
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	c0 17       	cp	r28, r16
 282:	d1 07       	cpc	r29, r17
 284:	98 f3       	brcs	.-26     	; 0x26c <DisplayImgOnSSD1306+0x16>
		SendDataToSSD1306( p_data[counter] );
	}
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	08 95       	ret

00000294 <main>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
int main(void)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	c4 56       	subi	r28, 0x64	; 100
 29e:	d1 09       	sbc	r29, r1
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int data_s[25] = {0Xff,
 2aa:	82 e3       	ldi	r24, 0x32	; 50
 2ac:	e0 e6       	ldi	r30, 0x60	; 96
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	de 01       	movw	r26, r28
 2b2:	11 96       	adiw	r26, 0x01	; 1
 2b4:	01 90       	ld	r0, Z+
 2b6:	0d 92       	st	X+, r0
 2b8:	8a 95       	dec	r24
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x20>
		0Xff,
		0Xff,
		0Xff,
		0Xff
	};
	unsigned int data_c[25] = {0Xff,
 2bc:	fe 01       	movw	r30, r28
 2be:	f3 96       	adiw	r30, 0x33	; 51
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	df 01       	movw	r26, r30
 2c4:	1d 92       	st	X+, r1
 2c6:	8a 95       	dec	r24
 2c8:	e9 f7       	brne	.-6      	; 0x2c4 <main+0x30>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9c ab       	std	Y+52, r25	; 0x34
 2d0:	8b ab       	std	Y+51, r24	; 0x33
		0x00,
		0x00,
		0x00,
		0x00
	};
	DDRA |= 0X01;
 2d2:	8a b3       	in	r24, 0x1a	; 26
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << 1);
 2d8:	8b b3       	in	r24, 0x1b	; 27
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	8b bb       	out	0x1b, r24	; 27
	_init_I2C();
 2de:	0e 94 58 00 	call	0xb0	; 0xb0 <_init_I2C>
	_init_SSD1306();
 2e2:	0e 94 03 01 	call	0x206	; 0x206 <_init_SSD1306>
	/* Replace with your application code */
	while (1)
	{	
		DisplayImgOnSSD1306( data_s, 25);
 2e6:	69 e1       	ldi	r22, 0x19	; 25
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 2b 01 	call	0x256	; 0x256 <DisplayImgOnSSD1306>
		PORTA ^= 0X01;
 2f2:	9b b3       	in	r25, 0x1b	; 27
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	89 27       	eor	r24, r25
 2f8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	bf ef       	ldi	r27, 0xFF	; 255
 2fc:	24 e3       	ldi	r18, 0x34	; 52
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	b1 50       	subi	r27, 0x01	; 1
 302:	20 40       	sbci	r18, 0x00	; 0
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x6c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x76>
 30a:	00 00       	nop
		_delay_ms(500);
		DisplayImgOnSSD1306( data_c, 25);
 30c:	69 e1       	ldi	r22, 0x19	; 25
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	ce 01       	movw	r24, r28
 312:	c3 96       	adiw	r24, 0x33	; 51
 314:	0e 94 2b 01 	call	0x256	; 0x256 <DisplayImgOnSSD1306>
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	a4 e3       	ldi	r26, 0x34	; 52
 31c:	bc e0       	ldi	r27, 0x0C	; 12
 31e:	91 50       	subi	r25, 0x01	; 1
 320:	a0 40       	sbci	r26, 0x00	; 0
 322:	b0 40       	sbci	r27, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x8a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x94>
 328:	00 00       	nop
 32a:	dd cf       	rjmp	.-70     	; 0x2e6 <main+0x52>

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
