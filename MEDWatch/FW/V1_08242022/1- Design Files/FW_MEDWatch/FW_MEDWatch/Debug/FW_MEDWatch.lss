
FW_MEDWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d3  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053a  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ce  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000022f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  7a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_19>:
static void I2CErrorChecker( unsigned int condition);

/****************************************************************************************************
**************************       ISR FUNCTIONS DECLARATION       ************************************
*****************************************************************************************************/
ISR(TWI_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	TWCR |= (1 << TWINT);
  8e:	86 b7       	in	r24, 0x36	; 54
  90:	80 68       	ori	r24, 0x80	; 128
  92:	86 bf       	out	0x36, r24	; 54
}
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <_init_I2C>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void _init_I2C( void ){
	DDRC |= (1 << 0) | (1 << 1);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	84 bb       	out	0x14, r24	; 20
	
	TWBR = 8;			// For 400KHz frequency clock on SCL it should be 8000000/(16+(2 * 2 (TWBR) * 4^0(TWPS)))
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	80 b9       	out	0x00, r24	; 0
  aa:	08 95       	ret

000000ac <SendDataOnI2C>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
unsigned int SendDataOnI2C( unsigned addr, unsigned int *data, unsigned int buffSize){
	TWCR |= (1<<TWINT)|(1<<TWSTA)| (1<<TWEN);	//Send START condition
  ac:	96 b7       	in	r25, 0x36	; 54
  ae:	94 6a       	ori	r25, 0xA4	; 164
  b0:	96 bf       	out	0x36, r25	; 54
	
	while (!(TWCR & (1<<TWINT)));				//Wait for TWINT Flag set. This indicates that the START condition has been transmitted
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <SendDataOnI2C+0x6>
	
	if ((TWSR & 0xF8) != START){				//Check value of TWI Status Register. Mask prescaler bits. If status different from	START go to ERROR
  b8:	91 b1       	in	r25, 0x01	; 1
		I2CErrorChecker( START );
	}
	TWDR = (addr | WRITE);						//Load SLA_W into TWDR Register. Clear TWINT bit in TWCR to start transmission of address
  ba:	83 b9       	out	0x03, r24	; 3
	TWCR |= (1<<TWINT) | (1<<TWEN);
  bc:	86 b7       	in	r24, 0x36	; 54
  be:	84 68       	ori	r24, 0x84	; 132
  c0:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1<<TWINT)));				//Wait for TWINT Flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
  c2:	06 b6       	in	r0, 0x36	; 54
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <SendDataOnI2C+0x16>
	
	if ((TWSR & 0xF8) != MT_SLA_ACK){			//Check value of TWI Status Register. Mask prescaler bits. If status different from	MT_SLA_ACK go to ERROR
  c8:	81 b1       	in	r24, 0x01	; 1
		I2CErrorChecker( MT_SLA_ACK );
	}
	for(unsigned int counter = 0; counter < buffSize; ++counter){
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <SendDataOnI2C+0x48>
		TWDR = *(data + counter);									//Load DATA into TWDR Register. Clear TWINT bit in TWCR to start transmission of data
  d0:	fc 01       	movw	r30, r24
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e6 0f       	add	r30, r22
  d8:	f7 1f       	adc	r31, r23
  da:	20 81       	ld	r18, Z
  dc:	23 b9       	out	0x03, r18	; 3
		TWCR |= (1<<TWINT) | (1<<TWEN);
  de:	26 b7       	in	r18, 0x36	; 54
  e0:	24 68       	ori	r18, 0x84	; 132
  e2:	26 bf       	out	0x36, r18	; 54
		
		while (!(TWCR & (1<<TWINT)));								//Wait for TWINT Flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received.
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <SendDataOnI2C+0x38>
		
		if ((TWSR & 0xF8) != MT_DATA_ACK){							//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_ACK go to ERROR
  ea:	21 b1       	in	r18, 0x01	; 1
  ec:	28 7f       	andi	r18, 0xF8	; 248
  ee:	28 32       	cpi	r18, 0x28	; 40
  f0:	21 f4       	brne	.+8      	; 0xfa <SendDataOnI2C+0x4e>
	while (!(TWCR & (1<<TWINT)));				//Wait for TWINT Flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
	
	if ((TWSR & 0xF8) != MT_SLA_ACK){			//Check value of TWI Status Register. Mask prescaler bits. If status different from	MT_SLA_ACK go to ERROR
		I2CErrorChecker( MT_SLA_ACK );
	}
	for(unsigned int counter = 0; counter < buffSize; ++counter){
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	84 17       	cp	r24, r20
  f6:	95 07       	cpc	r25, r21
  f8:	58 f3       	brcs	.-42     	; 0xd0 <SendDataOnI2C+0x24>
		if ((TWSR & 0xF8) != MT_DATA_ACK){							//Check value of TWI Status Register. Mask prescaler bits. If status different from MT_DATA_ACK go to ERROR
			I2CErrorChecker(MT_DATA_ACK);
			break;
		}
	}
	TWCR |= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//Transmit STOP condition
  fa:	86 b7       	in	r24, 0x36	; 54
  fc:	84 69       	ori	r24, 0x94	; 148
  fe:	86 bf       	out	0x36, r24	; 54
}
 100:	08 95       	ret

00000102 <SendCommandToSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void SendCommandToSSD1306( unsigned int command ){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <SendCommandToSSD1306+0x6>
 108:	00 d0       	rcall	.+0      	; 0x10a <SendCommandToSSD1306+0x8>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	unsigned int controlByte = 0b10000000;						//0b	C0	D/C	0	0	0	0	0	0 if C0 set to one it means the next data is command and if D/C set to zero it means the next data byte is command
	unsigned int data[2] = {controlByte, command};
 10e:	20 e8       	ldi	r18, 0x80	; 128
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	3a 83       	std	Y+2, r19	; 0x02
 114:	29 83       	std	Y+1, r18	; 0x01
 116:	9c 83       	std	Y+4, r25	; 0x04
 118:	8b 83       	std	Y+3, r24	; 0x03
	SendDataOnI2C( SSD1306_I2C_ADDR, data, 2);
 11a:	42 e0       	ldi	r20, 0x02	; 2
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	be 01       	movw	r22, r28
 120:	6f 5f       	subi	r22, 0xFF	; 255
 122:	7f 4f       	sbci	r23, 0xFF	; 255
 124:	88 e7       	ldi	r24, 0x78	; 120
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 56 00 	call	0xac	; 0xac <SendDataOnI2C>
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <SendDataToSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
static void SendDataToSSD1306( unsigned int data ){
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <SendDataToSSD1306+0x6>
 140:	00 d0       	rcall	.+0      	; 0x142 <SendDataToSSD1306+0x8>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	unsigned int controlByte = 0b01000000;						//0b	C0	D/C	0	0	0	0	0	0 if C0 set to zero it means the next data is data and if D/C set to 1 it means the next data byte is data
	unsigned int str_data[2] = {controlByte, data};
 146:	20 e4       	ldi	r18, 0x40	; 64
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	3a 83       	std	Y+2, r19	; 0x02
 14c:	29 83       	std	Y+1, r18	; 0x01
 14e:	9c 83       	std	Y+4, r25	; 0x04
 150:	8b 83       	std	Y+3, r24	; 0x03
	SendDataOnI2C( SSD1306_I2C_ADDR, str_data, 2);
 152:	42 e0       	ldi	r20, 0x02	; 2
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	6f 5f       	subi	r22, 0xFF	; 255
 15a:	7f 4f       	sbci	r23, 0xFF	; 255
 15c:	88 e7       	ldi	r24, 0x78	; 120
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 56 00 	call	0xac	; 0xac <SendDataOnI2C>
}
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <_init_SSD1306>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void _init_SSD1306( void ){
	SendCommandToSSD1306( SET_DIS_ON );
 172:	8f ea       	ldi	r24, 0xAF	; 175
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 81 00 	call	0x102	; 0x102 <SendCommandToSSD1306>
 17a:	08 95       	ret

0000017c <DisplayImgOnSSD1306>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void DisplayImgOnSSD1306( unsigned int *p_data, unsigned int buffSize){
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	7c 01       	movw	r14, r24
 18a:	8b 01       	movw	r16, r22
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	0a c0       	rjmp	.+20     	; 0x1a6 <DisplayImgOnSSD1306+0x2a>
		SendDataToSSD1306( p_data[counter] );
 192:	fe 01       	movw	r30, r28
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ee 0d       	add	r30, r14
 19a:	ff 1d       	adc	r31, r15
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
 1a0:	0e 94 9d 00 	call	0x13a	; 0x13a <SendDataToSSD1306>
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
void DisplayImgOnSSD1306( unsigned int *p_data, unsigned int buffSize){
	for(unsigned int counter = 0; counter < buffSize; ++counter){
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	c0 17       	cp	r28, r16
 1a8:	d1 07       	cpc	r29, r17
 1aa:	98 f3       	brcs	.-26     	; 0x192 <DisplayImgOnSSD1306+0x16>
		SendDataToSSD1306( p_data[counter] );
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <main>:
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
int main(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	e2 97       	sbiw	r28, 0x32	; 50
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
	unsigned int data[25] = {0Xff,
 1ce:	82 e3       	ldi	r24, 0x32	; 50
 1d0:	e0 e6       	ldi	r30, 0x60	; 96
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	de 01       	movw	r26, r28
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	8a 95       	dec	r24
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x1e>
		0Xff,
		0Xff,
		0Xff,
		0Xff
	};
	DDRA |= 0X01;
 1e0:	8a b3       	in	r24, 0x1a	; 26
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << 1);
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	8b bb       	out	0x1b, r24	; 27
	_init_I2C();
 1ec:	0e 94 50 00 	call	0xa0	; 0xa0 <_init_I2C>
	_init_SSD1306();
 1f0:	0e 94 b9 00 	call	0x172	; 0x172 <_init_SSD1306>
	/* Replace with your application code */
	while (1)
	{	
		DisplayImgOnSSD1306( data, 25);
 1f4:	69 e1       	ldi	r22, 0x19	; 25
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	0e 94 be 00 	call	0x17c	; 0x17c <DisplayImgOnSSD1306>
		PORTA ^= 0X01;
 200:	9b b3       	in	r25, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	89 27       	eor	r24, r25
 206:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	9c e0       	ldi	r25, 0x0C	; 12
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x54>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x5e>
 218:	00 00       	nop
 21a:	ec cf       	rjmp	.-40     	; 0x1f4 <main+0x3a>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
