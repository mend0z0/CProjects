
MEDWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099e  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b4  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000482  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e0  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_19>:
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	86 b7       	in	r24, 0x36	; 54
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	86 bf       	out	0x36, r24	; 54
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <_init_I2C>:
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	84 bb       	out	0x14, r24	; 20
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	80 b9       	out	0x00, r24	; 0
  94:	86 b7       	in	r24, 0x36	; 54
  96:	81 60       	ori	r24, 0x01	; 1
  98:	86 bf       	out	0x36, r24	; 54
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <SendDataOnI2C>:
  9e:	96 b7       	in	r25, 0x36	; 54
  a0:	94 6a       	ori	r25, 0xA4	; 164
  a2:	96 bf       	out	0x36, r25	; 54
  a4:	06 b6       	in	r0, 0x36	; 54
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <SendDataOnI2C+0x6>
  aa:	96 b7       	in	r25, 0x36	; 54
  ac:	90 68       	ori	r25, 0x80	; 128
  ae:	96 bf       	out	0x36, r25	; 54
  b0:	91 b1       	in	r25, 0x01	; 1
  b2:	83 b9       	out	0x03, r24	; 3
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	84 68       	ori	r24, 0x84	; 132
  b8:	86 bf       	out	0x36, r24	; 54
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <SendDataOnI2C+0x1c>
  c0:	86 b7       	in	r24, 0x36	; 54
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	86 bf       	out	0x36, r24	; 54
  c6:	81 b1       	in	r24, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <SendDataOnI2C+0x5a>
  ce:	fc 01       	movw	r30, r24
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e6 0f       	add	r30, r22
  d6:	f7 1f       	adc	r31, r23
  d8:	20 81       	ld	r18, Z
  da:	23 b9       	out	0x03, r18	; 3
  dc:	26 b7       	in	r18, 0x36	; 54
  de:	24 68       	ori	r18, 0x84	; 132
  e0:	26 bf       	out	0x36, r18	; 54
  e2:	06 b6       	in	r0, 0x36	; 54
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <SendDataOnI2C+0x44>
  e8:	26 b7       	in	r18, 0x36	; 54
  ea:	20 68       	ori	r18, 0x80	; 128
  ec:	26 bf       	out	0x36, r18	; 54
  ee:	21 b1       	in	r18, 0x01	; 1
  f0:	28 7f       	andi	r18, 0xF8	; 248
  f2:	28 32       	cpi	r18, 0x28	; 40
  f4:	21 f4       	brne	.+8      	; 0xfe <SendDataOnI2C+0x60>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	84 17       	cp	r24, r20
  fa:	95 07       	cpc	r25, r21
  fc:	40 f3       	brcs	.-48     	; 0xce <SendDataOnI2C+0x30>
  fe:	86 b7       	in	r24, 0x36	; 54
 100:	84 69       	ori	r24, 0x94	; 148
 102:	86 bf       	out	0x36, r24	; 54
 104:	08 95       	ret

00000106 <main>:
*
*	************************************************************************************************
*	License: Private License (Contact for more info.)
*	Email: s.taherparvar@gmail.com
****************************************************************************************************/
int main(void){
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	c8 5c       	subi	r28, 0xC8	; 200
 110:	d1 09       	sbc	r29, r1
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
	DDRA |= (1 << 1);
 11c:	8a b3       	in	r24, 0x1a	; 26
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8a bb       	out	0x1a, r24	; 26
	unsigned int data[100]={0xa1};
 122:	fe 01       	movw	r30, r28
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	88 ec       	ldi	r24, 0xC8	; 200
 128:	df 01       	movw	r26, r30
 12a:	1d 92       	st	X+, r1
 12c:	8a 95       	dec	r24
 12e:	e9 f7       	brne	.-6      	; 0x12a <main+0x24>
 130:	81 ea       	ldi	r24, 0xA1	; 161
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
	_init_I2C();
 138:	0e 94 45 00 	call	0x8a	; 0x8a <_init_I2C>
	
	PORTA ^= (1 << 1);
 13c:	9b b3       	in	r25, 0x1b	; 27
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	98 27       	eor	r25, r24
 142:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	bf ef       	ldi	r27, 0xFF	; 255
 146:	24 e3       	ldi	r18, 0x34	; 52
 148:	3c e0       	ldi	r19, 0x0C	; 12
 14a:	b1 50       	subi	r27, 0x01	; 1
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	30 40       	sbci	r19, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x44>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x4e>
 154:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 156:	9b b3       	in	r25, 0x1b	; 27
 158:	98 27       	eor	r25, r24
 15a:	9b bb       	out	0x1b, r25	; 27
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	a4 e3       	ldi	r26, 0x34	; 52
 160:	bc e0       	ldi	r27, 0x0C	; 12
 162:	91 50       	subi	r25, 0x01	; 1
 164:	a0 40       	sbci	r26, 0x00	; 0
 166:	b0 40       	sbci	r27, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x5c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x66>
 16c:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 16e:	9b b3       	in	r25, 0x1b	; 27
 170:	98 27       	eor	r25, r24
 172:	9b bb       	out	0x1b, r25	; 27
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	34 e3       	ldi	r19, 0x34	; 52
 178:	9c e0       	ldi	r25, 0x0C	; 12
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	30 40       	sbci	r19, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x74>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x7e>
 184:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 186:	9b b3       	in	r25, 0x1b	; 27
 188:	98 27       	eor	r25, r24
 18a:	9b bb       	out	0x1b, r25	; 27
 18c:	af ef       	ldi	r26, 0xFF	; 255
 18e:	b4 e3       	ldi	r27, 0x34	; 52
 190:	2c e0       	ldi	r18, 0x0C	; 12
 192:	a1 50       	subi	r26, 0x01	; 1
 194:	b0 40       	sbci	r27, 0x00	; 0
 196:	20 40       	sbci	r18, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x8c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x96>
 19c:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 19e:	9b b3       	in	r25, 0x1b	; 27
 1a0:	98 27       	eor	r25, r24
 1a2:	9b bb       	out	0x1b, r25	; 27
 1a4:	3f ef       	ldi	r19, 0xFF	; 255
 1a6:	94 e3       	ldi	r25, 0x34	; 52
 1a8:	ac e0       	ldi	r26, 0x0C	; 12
 1aa:	31 50       	subi	r19, 0x01	; 1
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	a0 40       	sbci	r26, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0xa4>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xae>
 1b4:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	98 27       	eor	r25, r24
 1ba:	9b bb       	out	0x1b, r25	; 27
 1bc:	bf ef       	ldi	r27, 0xFF	; 255
 1be:	24 e3       	ldi	r18, 0x34	; 52
 1c0:	3c e0       	ldi	r19, 0x0C	; 12
 1c2:	b1 50       	subi	r27, 0x01	; 1
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0xbc>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0xc6>
 1cc:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 1ce:	9b b3       	in	r25, 0x1b	; 27
 1d0:	98 27       	eor	r25, r24
 1d2:	9b bb       	out	0x1b, r25	; 27
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	a4 e3       	ldi	r26, 0x34	; 52
 1d8:	bc e0       	ldi	r27, 0x0C	; 12
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	a0 40       	sbci	r26, 0x00	; 0
 1de:	b0 40       	sbci	r27, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xd4>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xde>
 1e4:	00 00       	nop
	_delay_ms(500);
	PORTA ^= (1 << 1);
 1e6:	9b b3       	in	r25, 0x1b	; 27
 1e8:	89 27       	eor	r24, r25
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	34 e3       	ldi	r19, 0x34	; 52
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	30 40       	sbci	r19, 0x00	; 0
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0xec>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xf6>
 1fc:	00 00       	nop
	_delay_ms(500);
	/* Replace with your application code */
	while (1){
		SendDataOnI2C( 0x52, data, 2);
 1fe:	42 e0       	ldi	r20, 0x02	; 2
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	82 e5       	ldi	r24, 0x52	; 82
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 4f 00 	call	0x9e	; 0x9e <SendDataOnI2C>
		PORTA ^= (1 << 1);
 210:	9b b3       	in	r25, 0x1b	; 27
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	89 27       	eor	r24, r25
 216:	8b bb       	out	0x1b, r24	; 27
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	a4 e3       	ldi	r26, 0x34	; 52
 21c:	bc e0       	ldi	r27, 0x0C	; 12
 21e:	91 50       	subi	r25, 0x01	; 1
 220:	a0 40       	sbci	r26, 0x00	; 0
 222:	b0 40       	sbci	r27, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x118>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x122>
 228:	00 00       	nop
 22a:	e9 cf       	rjmp	.-46     	; 0x1fe <main+0xf8>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
